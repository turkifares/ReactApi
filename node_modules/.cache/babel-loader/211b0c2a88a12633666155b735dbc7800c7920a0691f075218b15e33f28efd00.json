{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dali\\\\OneDrive\\\\Bureau\\\\cours sesame sysmestre 2\\\\projt react\\\\ReactApi\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport { useState } from 'react';\nimport React from 'react';\nimport List from './components/List';\nimport Search from './components/Search';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Variable d'état pour stocker les données météorologiques\n  const [Weatherlist, SetWeatherlist] = useState(null);\n\n  // Fonction asynchrone pour récupérer les données météorologiques\n  const fetchData = async () => {\n    try {\n      // Effectuer une requête HTTP pour récupérer les données JSON\n      const response = await fetch('https://dummyjson.com/products');\n      const jsonData = await response.json();\n\n      // Afficher les données dans la console et les mettre à jour dans l'état\n      console.log(jsonData.products);\n      SetWeatherlist(jsonData.products);\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n\n  // Variable d'état pour stocker le terme de recherche\n  const [searchTerm, SetSearchTerm] = useState('');\n\n  // Fonction pour mettre à jour le terme de recherche lors de la saisie de l'utilisateur\n  const handleSearch = event => {\n    SetSearchTerm(event.target.value);\n  };\n\n  // Filtrer les données météorologiques en fonction du terme de recherche saisi\n  const searchedStories = Weatherlist === null || Weatherlist === void 0 ? void 0 : Weatherlist.filter(item => {\n    var _item$title;\n    return item === null || item === void 0 ? void 0 : (_item$title = item.title) === null || _item$title === void 0 ? void 0 : _item$title.toLowerCase().includes(searchTerm === null || searchTerm === void 0 ? void 0 : searchTerm.toLowerCase());\n  });\n\n  // Appeler fetchData une fois au chargement initial du composant\n  React.useEffect(() => {\n    fetchData();\n  }, []);\n\n  // Rendu du composant App\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Search, {\n      search: searchTerm,\n      onSearch: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), Weatherlist ?\n    /*#__PURE__*/\n    // Rendu du composant de liste avec les données filtrées\n    _jsxDEV(List, {\n      list: searchedStories\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this) :\n    /*#__PURE__*/\n    // Afficher un message de chargement si les données ne sont pas encore disponibles\n    _jsxDEV(\"p\", {\n      children: \"loading data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"xGtVTxxO4mydN8gtmjjFCHea7F8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","React","List","Search","jsxDEV","_jsxDEV","App","_s","Weatherlist","SetWeatherlist","fetchData","response","fetch","jsonData","json","console","log","products","error","searchTerm","SetSearchTerm","handleSearch","event","target","value","searchedStories","filter","item","_item$title","title","toLowerCase","includes","useEffect","className","children","search","onSearch","fileName","_jsxFileName","lineNumber","columnNumber","list","_c","$RefreshReg$"],"sources":["C:/Users/Dali/OneDrive/Bureau/cours sesame sysmestre 2/projt react/ReactApi/src/App.js"],"sourcesContent":["\r\nimport './App.css';\r\nimport { useState } from 'react';\r\nimport React from 'react'\r\nimport List from './components/List';\r\nimport Search from './components/Search'\r\n\r\n \r\n\r\nfunction App() {\r\n  // Variable d'état pour stocker les données météorologiques\r\n  const [Weatherlist, SetWeatherlist] = useState(null);\r\n\r\n  // Fonction asynchrone pour récupérer les données météorologiques\r\n  const fetchData = async () => {\r\n    try {\r\n      // Effectuer une requête HTTP pour récupérer les données JSON\r\n      const response = await fetch('https://dummyjson.com/products');\r\n      const jsonData = await response.json();\r\n\r\n      // Afficher les données dans la console et les mettre à jour dans l'état\r\n      console.log(jsonData.products);\r\n      SetWeatherlist(jsonData.products);\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n    }\r\n  };\r\n\r\n  // Variable d'état pour stocker le terme de recherche\r\n  const [searchTerm, SetSearchTerm] = useState('');\r\n\r\n  // Fonction pour mettre à jour le terme de recherche lors de la saisie de l'utilisateur\r\n  const handleSearch = (event) => {\r\n    SetSearchTerm(event.target.value);\r\n  };\r\n\r\n  // Filtrer les données météorologiques en fonction du terme de recherche saisi\r\n  const searchedStories = Weatherlist?.filter((item) => {\r\n    return item?.title?.toLowerCase().includes(searchTerm?.toLowerCase());\r\n  });\r\n\r\n  // Appeler fetchData une fois au chargement initial du composant\r\n  React.useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  // Rendu du composant App\r\n  return (\r\n    <div className=\"container\">\r\n      {/* Composant de recherche avec les props search et onSearch */}\r\n      <Search search={searchTerm} onSearch={handleSearch} />\r\n\r\n      {Weatherlist ? (\r\n        // Rendu du composant de liste avec les données filtrées\r\n        <List list={searchedStories} />\r\n      ) : (\r\n        // Afficher un message de chargement si les données ne sont pas encore disponibles\r\n        <p>loading data</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n  \r\n\r\n\r\n \r\n\r\n\r\n\r\nexport default App;\r\n \r\n\r\n"],"mappings":";;AACA,OAAO,WAAW;AAClB,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,mBAAmB;AACpC,OAAOC,MAAM,MAAM,qBAAqB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAIxC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;;EAEpD;EACA,MAAMU,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,CAAC;MAC9D,MAAMC,QAAQ,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;;MAEtC;MACAC,OAAO,CAACC,GAAG,CAACH,QAAQ,CAACI,QAAQ,CAAC;MAC9BR,cAAc,CAACI,QAAQ,CAACI,QAAQ,CAAC;IACnC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAChC;EACF,CAAC;;EAED;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;;EAEhD;EACA,MAAMqB,YAAY,GAAIC,KAAK,IAAK;IAC9BF,aAAa,CAACE,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACnC,CAAC;;EAED;EACA,MAAMC,eAAe,GAAGjB,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEkB,MAAM,CAAEC,IAAI,IAAK;IAAA,IAAAC,WAAA;IACpD,OAAOD,IAAI,aAAJA,IAAI,wBAAAC,WAAA,GAAJD,IAAI,CAAEE,KAAK,cAAAD,WAAA,uBAAXA,WAAA,CAAaE,WAAW,EAAE,CAACC,QAAQ,CAACZ,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEW,WAAW,EAAE,CAAC;EACvE,CAAC,CAAC;;EAEF;EACA7B,KAAK,CAAC+B,SAAS,CAAC,MAAM;IACpBtB,SAAS,EAAE;EACb,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,oBACEL,OAAA;IAAK4B,SAAS,EAAC,WAAW;IAAAC,QAAA,gBAExB7B,OAAA,CAACF,MAAM;MAACgC,MAAM,EAAEhB,UAAW;MAACiB,QAAQ,EAAEf;IAAa;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,EAErDhC,WAAW;IAAA;IACV;IACAH,OAAA,CAACH,IAAI;MAACuC,IAAI,EAAEhB;IAAgB;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;IAAA;IAE/B;IACAnC,OAAA;MAAA6B,QAAA,EAAG;IAAY;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAChB;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACG;AAEV;AAACjC,EAAA,CApDQD,GAAG;AAAAoC,EAAA,GAAHpC,GAAG;AA6DZ,eAAeA,GAAG;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}